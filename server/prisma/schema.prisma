// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  avatar       String?
  password     String?
  firstName    String?
  lastName     String?
  role         Role       @default(USER)
  provider     Provider   
  github       String?
  linkedin     String?
  refreshToken String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tags         Tag[]
  likes        Like[]
  comments     Comment[]
  articles     Article[]
  bookmarks    Bookmark[]
  followers    Follows[]  @relation("following")
  followings   Follows[]  @relation("follower")

  @@index([id])
  @@map("users")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Article {
  id        Int        @id @default(autoincrement())
  title     String
  content   String     @db.Text
  thumbnail String
  views     Int        @default(0)
  likes     Like[]
  comments  Comment[]
  bookmarks Bookmark[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  tags      Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@map("articles")
}

model Tag {
  name     String    @id @unique
  articles Article[]
  users    User[]

  @@index([name])
  @@map("tag")
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, articleId])
  @@index([articleId])
}

model Bookmark {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int

  @@id([userId, articleId])
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  STUDENT
  TEACHER
  GOOGLE
}
